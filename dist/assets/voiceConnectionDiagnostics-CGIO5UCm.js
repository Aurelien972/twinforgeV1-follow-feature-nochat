var I=Object.defineProperty;var h=(u,e,s)=>e in u?I(u,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):u[e]=s;var g=(u,e,s)=>h(u,typeof e!="symbol"?e+"":e,s);import{l as c}from"./page-fridge-C1QVLxk9.js";import"./vendor-ZbFMzY-i.js";import"./utils-CUtLAp28.js";import"./supabase-8_3juhcZ.js";import"./stores-ZZM8MTtI.js";import"./ui-components-OHztaiDj.js";import"./motion-HGAT--uT.js";import"./page-fridge-scan-C_CisW7P.js";import"./date-utils-BlBdbPk_.js";class b{constructor(){g(this,"capabilities",null)}detect(){if(this.capabilities)return this.capabilities;c.info("ENV_DETECTION","Detecting environment capabilities");const e=window.location.hostname,s=navigator.userAgent,n=e.includes("stackblitz")||e.includes("webcontainer")||e.includes("stackblitz.io"),t=n||s.includes("webcontainer"),a=e.includes("vercel.app")||e.includes("netlify.app")||e.includes("railway.app")||!e.includes("localhost")&&!n,o=e.includes("localhost")||e==="127.0.0.1",l=typeof WebSocket<"u",p=l,m=!0;let i="Unknown";n?i="StackBlitz WebContainer":o?i="Development (localhost)":a&&(i="Production");const d=[];t&&(d.push("WebContainer peut avoir des limitations avec les WebSockets externes"),d.push("Le mode vocal peut nécessiter des configurations supplémentaires")),l||d.push("Les WebSockets ne sont pas disponibles dans ce navigateur");const r=[];return n&&(r.push("Le mode vocal fonctionne via Supabase Edge Functions"),r.push("Si vous rencontrez des problèmes, vérifiez la configuration de votre edge function"),r.push("Le mode texte est toujours disponible comme alternative")),this.capabilities={canUseWebSocket:l,canUseVoiceMode:p,canUseTextMode:m,isStackBlitz:n,isWebContainer:t,isProduction:a,isDevelopment:o,environmentName:i,limitations:d,recommendations:r},c.info("ENV_DETECTION","Environment detected",{environment:i,canUseVoiceMode:p,canUseTextMode:m,limitations:d.length,recommendations:r.length}),this.capabilities}getCapabilities(){return this.capabilities||this.detect()}isVoiceModeAvailable(){return this.getCapabilities().canUseVoiceMode}isInStackBlitz(){return this.getCapabilities().isStackBlitz}getVoiceModeUnavailableMessage(){const e=this.getCapabilities();return e.canUseWebSocket?e.isStackBlitz||e.isWebContainer?`⚠️ Tentative de connexion en mode vocal...

Note : Vous êtes dans ${e.environmentName}. Si la connexion échoue :

✅ Solutions :
• Vérifiez que votre edge function Supabase est déployée
• Vérifiez que OPENAI_API_KEY est configurée dans les secrets Supabase
• Utilisez le mode texte comme alternative

💡 La connexion peut prendre quelques secondes...`:"Le mode vocal n'est pas disponible actuellement. Utilisez le mode texte.":`🚫 Le mode vocal nécessite la prise en charge des WebSockets.

Votre navigateur ou configuration réseau ne supporte pas cette fonctionnalité.

✅ Solution :
• Utilisez le mode texte (disponible maintenant)`}logEnvironmentInfo(){const e=this.getCapabilities();console.group("🌍 Environment Information"),console.log("Environment:",e.environmentName),console.log("Voice Mode Available:",e.canUseVoiceMode?"✅":"❌"),console.log("Text Mode Available:",e.canUseTextMode?"✅":"❌"),console.log("WebSocket Support:",e.canUseWebSocket?"✅":"❌"),e.limitations.length>0&&(console.group("⚠️ Limitations:"),e.limitations.forEach(s=>console.log("-",s)),console.groupEnd()),e.recommendations.length>0&&(console.group("💡 Recommendations:"),e.recommendations.forEach(s=>console.log("-",s)),console.groupEnd()),console.groupEnd()}}const f=new b,S={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1,VITE_SUPABASE_ANON_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3aXB5ZGJ0amFneXBvY3B2YnduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2ODg0MjIsImV4cCI6MjA3MDI2NDQyMn0.IS5IdKbmnGtgU_AaGYtUgX3ewaNpsiSAui5kbFV31_U",VITE_SUPABASE_URL:"https://kwipydbtjagypocpvbwn.supabase.co"};class D{async runAllTests(){c.info("VOICE_DIAGNOSTICS","🔬 Starting voice connection diagnostics");const e=[],s=await this.testEnvironmentVariables();e.push(s),this.logTestResult(1,s);const n=await this.testWebSocketAPI();e.push(n),this.logTestResult(2,n);const t=await this.testEnvironmentCapabilities();e.push(t),this.logTestResult(3,t);const a=await this.testEdgeFunctionReachability();e.push(a),this.logTestResult(4,a);const o=await this.testMicrophonePermissions();if(e.push(o),this.logTestResult(5,o),e.every(i=>i.passed)){const i=await this.testWebSocketConnection();e.push(i),this.logTestResult(6,i)}else c.warn("VOICE_DIAGNOSTICS","Skipping WebSocket connection test due to previous failures");const p=e.filter(i=>i.passed).length,m=e.filter(i=>!i.passed).length;return c.info("VOICE_DIAGNOSTICS","✅ Diagnostics complete",{totalTests:e.length,passed:p,failed:m}),m>0&&c.error("VOICE_DIAGNOSTICS","❌ Failed tests summary",{failedTests:e.filter(i=>!i.passed).map(i=>({test:i.test,message:i.message,details:i.details}))}),e}logTestResult(e,s){const n=s.passed?"✅":"❌",t=s.passed?"info":"error";c[t]("VOICE_DIAGNOSTICS",`${n} Test ${e}: ${s.test} - ${s.message}`,{testNumber:e,testName:s.test,passed:s.passed,message:s.message,details:s.details})}async testEnvironmentVariables(){c.info("VOICE_DIAGNOSTICS","Test 1: Checking environment variables");const e="https://kwipydbtjagypocpvbwn.supabase.co",s="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3aXB5ZGJ0amFneXBvY3B2YnduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2ODg0MjIsImV4cCI6MjA3MDI2NDQyMn0.IS5IdKbmnGtgU_AaGYtUgX3ewaNpsiSAui5kbFV31_U",t=!0,a={VITE_SUPABASE_URL:`${e.substring(0,30)}...`,VITE_SUPABASE_ANON_KEY:"SET (length: "+s.length+")",allViteVars:Object.keys(S).filter(o=>o.startsWith("VITE_"))};return{passed:t,test:"Environment Variables",message:"Supabase configuration found",details:a}}async testWebSocketAPI(){c.info("VOICE_DIAGNOSTICS","Test 2: Checking WebRTC API availability");const e=typeof RTCPeerConnection<"u",s=!!(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia),n=e&&s;return{passed:n,test:"WebRTC API",message:n?"WebRTC API is available":`WebRTC requirements missing: ${e?"":"RTCPeerConnection "}${s?"":"getUserMedia"}`,details:{hasRTCPeerConnection:e,hasGetUserMedia:s,userAgent:navigator.userAgent}}}async testEnvironmentCapabilities(){c.info("VOICE_DIAGNOSTICS","Test 3: Checking environment capabilities");const e=f.getCapabilities(),s=e.canUseVoiceMode;return{passed:s,test:"Environment Capabilities",message:s?"Voice mode is supported in this environment":`Voice mode not supported: ${e.limitations.join(", ")}`,details:{canUseVoiceMode:e.canUseVoiceMode,canUseWebSocket:e.canUseWebSocket,environmentName:e.environmentName,isStackBlitz:e.isStackBlitz,isWebContainer:e.isWebContainer,limitations:e.limitations,recommendations:e.recommendations}}}async testEdgeFunctionReachability(){c.info("VOICE_DIAGNOSTICS","Test 4: Testing edge function reachability (HTTP)");const e="https://kwipydbtjagypocpvbwn.supabase.co",s="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3aXB5ZGJ0amFneXBvY3B2YnduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2ODg0MjIsImV4cCI6MjA3MDI2NDQyMn0.IS5IdKbmnGtgU_AaGYtUgX3ewaNpsiSAui5kbFV31_U";try{const n=`${e}/functions/v1/voice-coach-realtime/health`;c.info("VOICE_DIAGNOSTICS","Making HTTP GET request to health endpoint",{url:n});const t=await fetch(n,{method:"GET",headers:{apikey:s,Authorization:`Bearer ${s}`}});let a=null,o=t.ok;if(t.ok)try{a=await t.json(),c.info("VOICE_DIAGNOSTICS","Health check response received",a),a.hasOpenAIKey||(o=!1)}catch{c.warn("VOICE_DIAGNOSTICS","Could not parse health check response as JSON")}return{passed:o,test:"Edge Function Reachability",message:o?a?.hasOpenAIKey?`Edge function is ready with OpenAI key configured (${a.openaiKeyPrefix})`:"Edge function is reachable but OPENAI_API_KEY is NOT configured":`Edge function returned error: HTTP ${t.status}`,details:{status:t.status,statusText:t.statusText,healthData:a,url:n,recommendation:a?.hasOpenAIKey?void 0:"Go to Supabase Dashboard > Edge Functions > voice-coach-realtime > Secrets and add OPENAI_API_KEY"}}}catch(n){const t=n instanceof Error?n.message:String(n);return{passed:!1,test:"Edge Function Reachability",message:`Cannot reach edge function: ${t}`,details:{error:t,name:n instanceof Error?n.name:"Unknown",possibleCauses:["Network connectivity issue","CORS policy blocking request","Edge function not deployed","Firewall or proxy blocking connection"]}}}}async testMicrophonePermissions(){c.info("VOICE_DIAGNOSTICS","Test 5: Checking microphone permissions");try{if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return{passed:!1,test:"Microphone Permissions",message:"getUserMedia API not available",details:{reason:"Browser does not support mediaDevices API",suggestion:"Update your browser or use a different browser"}};const e=await navigator.mediaDevices.getUserMedia({audio:!0});return e.getTracks().forEach(s=>s.stop()),{passed:!0,test:"Microphone Permissions",message:"Microphone access granted",details:{tracks:e.getTracks().map(s=>({kind:s.kind,label:s.label,enabled:s.enabled}))}}}catch(e){const s=e instanceof Error?e.name:"Unknown",n=e instanceof Error?e.message:String(e);return{passed:!1,test:"Microphone Permissions",message:`Microphone access denied: ${s}`,details:{error:n,errorName:s,possibleCauses:s==="NotAllowedError"?["User denied microphone permission","Permission prompt dismissed"]:s==="NotFoundError"?["No microphone device found"]:["Unknown permission error"]}}}}async testWebSocketConnection(){c.info("VOICE_DIAGNOSTICS","Test 6: Testing WebRTC session creation");const e="https://kwipydbtjagypocpvbwn.supabase.co",s="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3aXB5ZGJ0amFneXBvY3B2YnduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2ODg0MjIsImV4cCI6MjA3MDI2NDQyMn0.IS5IdKbmnGtgU_AaGYtUgX3ewaNpsiSAui5kbFV31_U";return new Promise(async n=>{const t=Date.now();let a=null;try{c.info("VOICE_DIAGNOSTICS","Creating RTCPeerConnection for test"),a=new RTCPeerConnection;const o=await navigator.mediaDevices.getUserMedia({audio:!0});o.getTracks().forEach(r=>{a&&a.addTrack(r,o)});const l=a.createDataChannel("test-channel"),p=await a.createOffer();await a.setLocalDescription(p),c.info("VOICE_DIAGNOSTICS","Sending SDP offer to backend");const m=`${e}/functions/v1/voice-coach-realtime/session`,i=await fetch(m,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${s}`,apikey:s},body:JSON.stringify({sdp:p.sdp,model:"gpt-4o-realtime-preview-2024-12-17",voice:"alloy"})});o.getTracks().forEach(r=>r.stop()),l.close(),a.close();const d=Date.now()-t;if(i.ok){const r=await i.text();n({passed:!0,test:"WebRTC Session Creation",message:`WebRTC session created successfully (${d}ms)`,details:{duration:d,sdpOfferLength:p.sdp?.length||0,sdpAnswerLength:r.length,status:i.status}})}else{const r=await i.text();n({passed:!1,test:"WebRTC Session Creation",message:`Session creation failed: HTTP ${i.status}`,details:{duration:d,status:i.status,statusText:i.statusText,error:r,possibleCauses:[i.status===500?"OPENAI_API_KEY not configured in Edge Function":"",i.status===401?"Supabase authentication failed":"",i.status===400?"Invalid SDP format":"","Network or CORS issue"].filter(Boolean),solution:i.status===500?"Go to Supabase Dashboard > Edge Functions > Secrets and add OPENAI_API_KEY":"Check backend logs for details"}})}}catch(o){const l=Date.now()-t;a&&a.close(),n({passed:!1,test:"WebRTC Session Creation",message:`WebRTC test failed: ${o instanceof Error?o.message:String(o)}`,details:{duration:l,error:o instanceof Error?o.message:String(o),errorName:o instanceof Error?o.name:"Unknown",stack:o instanceof Error?o.stack:void 0,possibleCauses:["Microphone access denied","RTCPeerConnection not supported","Network connectivity issue","CORS or firewall blocking"]}})}})}printResults(e){console.group("🔬 Voice Connection Diagnostics"),e.forEach((t,a)=>{const o=t.passed?"✅":"❌";console.group(`${o} Test ${a+1}: ${t.test}`),console.log("Status:",t.passed?"PASSED":"FAILED"),console.log("Message:",t.message),t.details&&console.log("Details:",t.details),console.groupEnd()});const s=e.filter(t=>t.passed).length,n=e.length;console.log(`
📊 Summary:`,`${s}/${n} tests passed`),s<n&&(console.log(`
💡 Next Steps:`),e.filter(t=>!t.passed).forEach(t=>{console.log(`- Fix: ${t.test}`),console.log(`  ${t.message}`)})),console.groupEnd()}}export{D as VoiceConnectionDiagnostics};
