function f(i){const a=[],t=[];return typeof i.ai_refine!="boolean"&&a.push("ai_refine must be a boolean"),!i.final_shape_params||typeof i.final_shape_params!="object"?a.push("final_shape_params must be a valid object"):Object.entries(i.final_shape_params).forEach(([n,e])=>{(typeof e!="number"||!Number.isFinite(e))&&a.push(`final_shape_params.${n} must be a finite number, got ${typeof e}: ${e}`)}),!i.final_limb_masses||typeof i.final_limb_masses!="object"?a.push("final_limb_masses must be a valid object"):Object.entries(i.final_limb_masses).forEach(([n,e])=>{(typeof e!="number"||!Number.isFinite(e))&&a.push(`final_limb_masses.${n} must be a finite number, got ${typeof e}: ${e}`)}),Array.isArray(i.clamped_keys)||a.push("clamped_keys must be an array"),(typeof i.out_of_range_count!="number"||!Number.isFinite(i.out_of_range_count))&&a.push("out_of_range_count must be a finite number"),(typeof i.active_keys_count!="number"||!Number.isFinite(i.active_keys_count))&&a.push("active_keys_count must be a finite number"),(!i.mapping_version||typeof i.mapping_version!="string")&&a.push("mapping_version must be a non-empty string"),i.ai_confidence!==void 0&&(typeof i.ai_confidence!="number"||!Number.isFinite(i.ai_confidence))&&t.push("ai_confidence should be a finite number if provided"),i.envelope_violations!==void 0&&!Array.isArray(i.envelope_violations)&&t.push("envelope_violations should be an array if provided"),i.db_violations!==void 0&&!Array.isArray(i.db_violations)&&t.push("db_violations should be an array if provided"),{isValid:a.length===0,errors:a,warnings:t}}export{f as validateRefineResponse};
